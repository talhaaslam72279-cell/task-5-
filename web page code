<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Packet Capture Analysis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Warm Neutral Harmony -->
    <!-- Application Structure Plan: A dashboard-style SPA with a primary navigation bar to select a protocol (DNS, HTTP, TCP, UDP) or a summary comparison view. This interactive, non-linear structure allows users to explore protocols in any order, which is more engaging than a static report. The main content area dynamically updates to show detailed findings, including custom-built animated diagrams (e.g., TCP Handshake) to enhance understanding. This design prioritizes user exploration and concept visualization over the report's linear format. -->
    <!-- Visualization & Content Choices: 
        - Report Info: TCP Handshake Process. Goal: Explain connection setup. Viz/Method: Animated HTML/CSS diagram. Interaction: On-load animation revealing steps. Justification: Visually demonstrates the sequence, which is more intuitive than static text. Library/Method: Custom HTML/CSS.
        - Report Info: HTTP Clear-Text Data. Goal: Highlight security risk. Viz/Method: HTML representation of a request/response flow. Interaction: Static visual with highlighted sensitive data. Justification: Clearly visualizes the vulnerability described in the report. Library/Method: HTML/CSS with Tailwind.
        - Report Info: TCP vs. UDP differences (header size). Goal: Compare protocol overhead. Viz/Method: Chart.js Doughnut Chart. Interaction: Hover tooltips on chart segments. Justification: Quantifies a key difference ("UDP headers are simpler") mentioned qualitatively in the report. Library/Method: Chart.js.
        - Report Info: DNS/UDP Flow. Goal: Explain connectionless query-response. Viz/Method: Simple HTML/CSS diagram. Interaction: Static visual. Justification: Provides a clear, simple visualization of the quick exchange. Library/Method: HTML/CSS.
        - CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #fdfcfb; /* Warm off-white */
            color: #3f3c3a; /* Dark warm gray */
        }
        .nav-button {
            transition: all 0.3s ease;
            position: relative;
        }
        .nav-button.active::after, .nav-button:hover::after {
            content: '';
            position: absolute;
            bottom: -4px;
            left: 0;
            right: 0;
            height: 2px;
            background-color: #eb5e28; /* Accent orange */
        }
        .card {
            background-color: #ffffff;
            border: 1px solid #f2e9e4;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -2px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease-in-out;
        }
        .handshake-step {
            opacity: 0;
            transform: translateY(20px);
            animation: fadeIn 0.5s forwards;
        }
        @keyframes fadeIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .chart-container {
            position: relative; 
            width: 100%; 
            max-width: 400px; 
            margin-left: auto; 
            margin-right: auto; 
            height: 300px;
            max-height: 350px;
        }
    </style>
</head>
<body class="antialiased">
    <div class="container mx-auto px-4 py-8 md:px-8 md:py-12">
        <header class="text-center mb-10">
            <h1 class="text-3xl md:text-4xl font-bold text-[#252422]">Interactive Packet Capture Analysis</h1>
            <p class="mt-2 text-lg text-[#403d39]">An interactive exploration of core network protocols based on capture file analysis.</p>
        </header>

        <nav class="flex justify-center border-b border-gray-200 mb-8">
            <div id="nav-buttons" class="flex flex-wrap justify-center space-x-4 md:space-x-8 -mb-px">
                <button data-view="summary" class="nav-button py-4 px-1 text-base md:text-lg font-medium text-gray-600 hover:text-[#eb5e28] whitespace-nowrap active">Comparison</button>
                <button data-view="tcp" class="nav-button py-4 px-1 text-base md:text-lg font-medium text-gray-600 hover:text-[#eb5e28] whitespace-nowrap">TCP</button>
                <button data-view="udp" class="nav-button py-4 px-1 text-base md:text-lg font-medium text-gray-600 hover:text-[#eb5e28] whitespace-nowrap">UDP</button>
                <button data-view="http" class="nav-button py-4 px-1 text-base md:text-lg font-medium text-gray-600 hover:text-[#eb5e28] whitespace-nowrap">HTTP</button>
                <button data-view="dns" class="nav-button py-4 px-1 text-base md:text-lg font-medium text-gray-600 hover:text-[#eb5e28] whitespace-nowrap">DNS</button>
            </div>
        </nav>

        <main id="content-area">
            <!-- Content will be dynamically inserted here -->
        </main>
    </div>

    <script>
        const reportData = {
            summary: {
                title: "Protocol Comparison: Reliability vs. Speed",
                intro: "The analysis of the packet captures reveals the fundamental trade-offs between the internet's two main transport protocols: TCP's reliability and UDP's speed. This summary highlights their core differences and the security implications of application-layer protocols.",
                cards: [
                    { title: "Reliability vs. Speed", content: "A clear contrast between the connection-based security of TCP (demonstrated by the Handshake) and the efficiency of UDP (demonstrated by the streamlined DNS traffic)." },
                    { title: "Data Visibility", content: "The HTTP capture serves as a critical reminder of the security implications of unencrypted web traffic, as all application data is exposed in clear text." },
                    { title: "Core Protocol Function", content: "All captures confirm the packet-level mechanisms necessary for their respective functions, from the naming resolution of DNS to the reliable session management of TCP." }
                ],
                chart: {
                    type: 'doughnut',
                    data: {
                        labels: ['TCP Header (20 bytes)', 'UDP Header (8 bytes)'],
                        datasets: [{
                            label: 'Typical Header Size',
                            data: [20, 8],
                            backgroundColor: ['#4a5568', '#eb5e28'],
                            borderColor: '#fdfcfb',
                            borderWidth: 4,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { font: { size: 14 } }
                            },
                            title: {
                                display: true,
                                text: 'Comparison of Protocol Header Size',
                                font: { size: 16, weight: '600' },
                                padding: { top: 10, bottom: 20 }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return `${context.label}: ${context.raw} bytes`;
                                    }
                                }
                            }
                        }
                    }
                }
            },
            tcp: {
                title: "Transmission Control Protocol (TCP)",
                intro: "This capture highlights the TCP transport layer, which powers reliable, connection-oriented applications like HTTP, FTP, and secure shell (SSH). Its primary function is to ensure that all data arrives in order and without errors.",
                findings: [
                    { category: "Protocol Focus", finding: "Powers reliable, connection-oriented applications where data integrity is paramount." },
                    { category: "Packet Details", finding: "A crucial finding is the successful Three-Way Handshake (SYN, SYN/ACK, ACK), establishing the session. This process is mandatory for all TCP connections." },
                    { category: "Key Metric", finding: "The packets contain constantly incrementing Sequence (Seq) and Acknowledgment (Ack) numbers, which guarantee ordered data delivery and manage retransmissions." },
                    { category: "Termination", finding: "Successful session closures are marked by FIN (Finish) flags, while abrupt disconnections would be indicated by RST (Reset) flags." }
                ]
            },
            udp: {
                title: "User Datagram Protocol (UDP)",
                intro: "This capture highlights the UDP transport layer, chosen by applications where speed and low overhead are prioritized over guaranteed delivery, such as in DNS, VoIP, and online gaming.",
                findings: [
                    { category: "Protocol Focus", finding: "Used for fast, connectionless communication where some packet loss is acceptable." },
                    { category: "Packet Details", finding: "Compared to TCP, UDP headers are significantly simpler, containing only Source Port, Destination Port, Length, and Checksum. This simplicity reduces processing delay." },
                    { category: "Reliability", finding: "The captured packets contain no Sequence or Acknowledgment numbers. Lost packets are not tracked or automatically retransmitted at the transport layer." },
                    { category: "Common Uses", finding: "Beyond DNS, this capture would include other critical protocols like DHCP (network configuration) or potentially SNMP (network management)." }
                ]
            },
            http: {
                title: "Hypertext Transfer Protocol (HTTP)",
                intro: "This capture focuses on unencrypted HTTP traffic (Layer 7). It reveals how web browsers and servers communicate in clear text, highlighting significant security considerations for modern web applications.",
                findings: [
                    { category: "Protocol Focus", finding: "The application layer protocol for transmitting hypermedia documents, such as HTML." },
                    { category: "Packet Details", finding: "Since the traffic is HTTP (not HTTPS), the packet payload contains clear text communication. This includes the full URL, the client's User-Agent, and all request headers." },
                    { category: "Key Methods", finding: "Captured packets include essential HTTP methods: GET (used to retrieve resources) and POST (used to submit data)." },
                    { category: "Security Risk", finding: "The clear-text nature of this traffic means that any sensitive data (unencrypted credentials, session information) sent over HTTP would be directly visible in this capture." }
                ]
            },
            dns: {
                title: "Domain Name System (DNS)",
                intro: "These packets show DNS at work (Layer 7), which is responsible for resolving human-readable hostnames (like www.google.com) into machine-readable IP addresses (like 172.217.16.196).",
                findings: [
                    { category: "Protocol Focus", finding: "The internet's phonebook, translating domain names to IP addresses." },
                    { category: "Packet Details", finding: "Traffic confirms the use of UDP on port 53. Each exchange consists of a DNS Query (client) and a corresponding DNS Response (server) with the IP address." },
                    { category: "Key Metric", finding: "The captured count of queries should perfectly match the count of successful responses, demonstrating an efficient resolution process." },
                    { category: "Behavior", finding: "UDP is chosen for its speed; the client expects a quick, connectionless reply. If a packet is lost, the client usually retransmits the query." }
                ]
            }
        };

        const contentArea = document.getElementById('content-area');
        const navButtons = document.getElementById('nav-buttons');

        function renderSummary() {
            const data = reportData.summary;
            let cardsHtml = data.cards.map(card => `
                <div class="card p-6">
                    <h3 class="text-xl font-bold text-[#252422]">${card.title}</h3>
                    <p class="mt-2 text-gray-600">${card.content}</p>
                </div>
            `).join('');

            contentArea.innerHTML = `
                <div class="text-center mb-10">
                    <h2 class="text-2xl md:text-3xl font-bold text-[#252422]">${data.title}</h2>
                    <p class="mt-2 text-lg text-gray-600 max-w-3xl mx-auto">${data.intro}</p>
                </div>
                <div class="grid md:grid-cols-2 gap-8">
                    <div class="flex flex-col justify-center space-y-6">
                        ${cardsHtml}
                    </div>
                    <div class="card p-6 flex items-center justify-center">
                        <div class="chart-container">
                            <canvas id="protocolChart"></canvas>
                        </div>
                    </div>
                </div>
            `;
            new Chart(document.getElementById('protocolChart'), data.chart);
        }

        function renderProtocolView(protocol) {
            const data = reportData[protocol];
            let findingsHtml = data.findings.map(item => `
                <tr class="border-b border-gray-200">
                    <td class="py-4 pr-4 font-semibold text-gray-800 align-top w-1/4">${item.category}</td>
                    <td class="py-4 text-gray-600">${item.finding}</td>
                </tr>
            `).join('');

            let diagramHtml = '';
            if (protocol === 'tcp') {
                diagramHtml = `
                    <h3 class="text-xl font-bold text-[#252422] mt-8 mb-4">Visualizing the Three-Way Handshake</h3>
                    <div class="card p-6 space-y-4">
                        <div class="flex items-center justify-between handshake-step" style="animation-delay: 0.1s;">
                            <div class="text-center">
                                <div class="font-mono text-lg p-3 bg-blue-100 text-blue-800 rounded-lg">Client</div>
                            </div>
                            <div class="text-center flex-grow mx-4">
                                <div class="font-semibold">[ SYN ]</div>
                                <div class="w-full h-0.5 bg-gray-300 relative">
                                    <div class="absolute right-0 top-1/2 -mt-1.5 w-0 h-0 border-t-[6px] border-t-transparent border-b-[6px] border-b-transparent border-l-[8px] border-l-gray-400"></div>
                                </div>
                                <div class="text-sm text-gray-500">Seq = x</div>
                            </div>
                            <div class="text-center">
                                <div class="font-mono text-lg p-3 bg-gray-100 text-gray-800 rounded-lg">Server</div>
                            </div>
                        </div>
                        <div class="flex items-center justify-between handshake-step" style="animation-delay: 0.6s;">
                             <div class="text-center">
                                <div class="font-mono text-lg p-3 bg-gray-100 text-gray-800 rounded-lg">Client</div>
                            </div>
                            <div class="text-center flex-grow mx-4">
                                <div class="font-semibold">[ SYN, ACK ]</div>
                                <div class="w-full h-0.5 bg-gray-300 relative">
                                    <div class="absolute left-0 top-1/2 -mt-1.5 w-0 h-0 border-t-[6px] border-t-transparent border-b-[6px] border-b-transparent border-r-[8px] border-r-gray-400"></div>
                                </div>
                                <div class="text-sm text-gray-500">Seq = y, Ack = x+1</div>
                            </div>
                            <div class="text-center">
                                <div class="font-mono text-lg p-3 bg-green-100 text-green-800 rounded-lg">Server</div>
                            </div>
                        </div>
                        <div class="flex items-center justify-between handshake-step" style="animation-delay: 1.1s;">
                             <div class="text-center">
                                <div class="font-mono text-lg p-3 bg-blue-100 text-blue-800 rounded-lg">Client</div>
                            </div>
                            <div class="text-center flex-grow mx-4">
                                <div class="font-semibold">[ ACK ]</div>
                                <div class="w-full h-0.5 bg-gray-300 relative">
                                    <div class="absolute right-0 top-1/2 -mt-1.5 w-0 h-0 border-t-[6px] border-t-transparent border-b-[6px] border-b-transparent border-l-[8px] border-l-gray-400"></div>
                                </div>
                                <div class="text-sm text-gray-500">Seq = x+1, Ack = y+1</div>
                            </div>
                            <div class="text-center">
                                <div class="font-mono text-lg p-3 bg-green-100 text-green-800 rounded-lg">Server</div>
                            </div>
                        </div>
                        <div class="text-center text-green-700 font-bold pt-4 handshake-step" style="animation-delay: 1.6s;">Connection Established</div>
                    </div>
                `;
            } else if (protocol === 'http') {
                 diagramHtml = `
                    <h3 class="text-xl font-bold text-[#252422] mt-8 mb-4">Visualizing an HTTP Request (Clear Text)</h3>
                    <div class="card p-6 font-mono text-sm bg-[#252422] text-gray-200 rounded-lg overflow-x-auto">
                        <p class="text-green-400">&gt; GET /login.html HTTP/1.1</p>
                        <p class="text-green-400">&gt; Host: example.com</p>
                        <p class="text-green-400">&gt; User-Agent: Mozilla/5.0</p>
                        <br>
                        <p class="text-cyan-400">&lt; HTTP/1.1 200 OK</p>
                        <p class="text-cyan-400">&lt; Content-Type: text/html</p>
                        <br>
                        <p class="text-cyan-400">&lt; &lt;form action="/login" method="post"&gt;</p>
                        <p class="text-cyan-400">&lt;   &lt;input type="text" name="username"&gt;</p>
                        <p class="text-cyan-400">&lt;   &lt;input type="password" name="password"&gt; <span class="text-red-500 font-bold">&lt;-- WARNING: SENT IN CLEAR TEXT!</span></p>
                        <p class="text-cyan-400">&lt; &lt;/form&gt;</p>
                    </div>
                `;
            }

            contentArea.innerHTML = `
                <div class="text-center mb-10">
                    <h2 class="text-2xl md:text-3xl font-bold text-[#252422]">${data.title}</h2>
                    <p class="mt-2 text-lg text-gray-600 max-w-3xl mx-auto">${data.intro}</p>
                </div>
                <div class="card p-6 md:p-8">
                     <table class="w-full text-left">
                        <tbody>
                            ${findingsHtml}
                        </tbody>
                    </table>
                </div>
                ${diagramHtml}
            `;
        }
        
        navButtons.addEventListener('click', (e) => {
            if (e.target.tagName === 'BUTTON') {
                document.querySelector('.nav-button.active').classList.remove('active');
                e.target.classList.add('active');
                const view = e.target.dataset.view;
                if (view === 'summary') {
                    renderSummary();
                } else {
                    renderProtocolView(view);
                }
            }
        });

        // Initial render
        renderSummary();
    </script>
</body>
</html>
